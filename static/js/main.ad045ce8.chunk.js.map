{"version":3,"sources":["utils/Api.js","components/Wrapper/index.js","components/HeaderText/index.js","components/HeaderBody/index.js","components/Header/index.js","components/Search/index.js","components/Table/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","res","data","results","map","employee","firstName","name","first","lastName","last","phone","email","gender","id","value","Wrapper","children","className","HeaderText","HeaderBody","Header","Search","props","search","onChange","handleSearchChange","type","placeholder","aria-label","onClick","handleClick","Table","employees","striped","bordered","hover","Directory","useState","setEmployees","setSearch","useEffect","Api","console","log","catch","err","event","lowerCaseSearch","target","toLowerCase","filter","filteredList","push","filterEmployees","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAGe,EACG,WACV,OAAOA,IACFC,IAAI,iDACJC,MAAK,SAAAC,GAEF,OADkBA,EAAIC,KAAKC,QACVC,KAAI,SAAAC,GACjB,MAAM,CACFC,UAAWD,EAASE,KAAKC,MACzBC,SAAUJ,EAASE,KAAKG,KACxBC,MAAON,EAASM,MAChBC,MAAOP,EAASO,MAChBC,OAAQR,EAASQ,OACjBC,GAAIT,EAASS,GAAGC,cCLzBC,MATf,YAA+B,IAAZC,EAAW,EAAXA,SACf,OACI,yBAAKC,UAAY,WACbD,I,MCMGE,MAPf,WACI,OACI,wBAAID,UAAY,cAAhB,uB,MCOOE,MARf,WACI,OACI,yBAAKF,UAAY,cACb,kBAAC,EAAD,QCIGG,MATf,WACI,OACI,6BACI,kBAAC,EAAD,Q,MCkCGC,MAnCf,SAAgBC,GAEZ,OACI,0BAAML,UAAU,UACZ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,mBAIJ,2BACIH,MAAOQ,EAAMC,OACbC,SAAUF,EAAMG,mBAChBR,UAAU,uBACVX,KAAK,OACLoB,KAAK,OACLC,YAAY,aACZC,aAAW,WAEf,4BAEItB,KAAK,OACLoB,KAAK,SACLG,QAASP,EAAMQ,aAJnB,a,QCCDC,MArBf,YAA+B,IAAdC,EAAa,EAAbA,UACb,OACQ,kBAAC,IAAD,CAAsBC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACxC,+BACI,4BACI,0CACA,yCACA,qCACA,qCACA,wCAIHH,ICyENI,MAjFf,WAAuB,IAAD,EACgBC,mBAAS,IADzB,mBACXL,EADW,KACAM,EADA,OAEUD,qBAFV,mBAEXd,EAFW,KAEHgB,EAFG,OAGcF,mBAAS,IAHvB,mBAiElB,OAjEkB,UAKlBG,qBAAU,WAENC,IACC1C,MAAK,SAAAiC,GACFU,QAAQC,IAAIX,GACZM,EAAaN,MAGhBY,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QACzB,IAoDD,6BACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEpB,mBApDa,SAAAqB,GACvBJ,QAAQC,IAAI,oBACZ,IACMI,EADYD,EAAME,OAAOlC,MACGmC,cAClCV,EAAUQ,GACVL,QAAQC,IAAIpB,IAgDFO,YA5CM,SAAAgB,GAChBJ,QAAQC,IAAIpB,GAMjB,SAAyBA,GACrBmB,QAAQC,IAAIpB,GACZmB,QAAQC,IAAIX,GAEPA,EAAUkB,QAAO,SAAAlB,GACb,GAAGA,EAAU3B,UAAU4C,gBAAkB1B,GAAUS,EAAUxB,SAASyC,gBAAkB1B,EAAQ,CAChG,IAAM4B,EAAe,GACrBA,EAAaC,KAAKpB,GAClBU,QAAQC,IAAIQ,GACZb,EAAaa,OAdrBE,CAAgB9B,MA4CR,kBAAC,EAAD,CACES,UAAWA,EAAU7B,KAtBnC,SAAwBC,GACpB,OACI,4BACI,4BAAKA,EAASC,WACd,4BAAKD,EAASI,UACd,4BAAKJ,EAASM,OACd,4BAAKN,EAASO,OACd,4BAAKP,EAASQ,iB,MCtDf0C,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ad045ce8.chunk.js","sourcesContent":["import axios from \"axios\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default {\n    getEmployees: function () {\n        return axios\n            .get(\"https://randomuser.me/api/?results=100&nat=us\")\n            .then(res => {\n                const employees = res.data.results;\n                return employees.map(employee => {\n                    return{\n                        firstName: employee.name.first,\n                        lastName: employee.name.last,\n                        phone: employee.phone,\n                        email: employee.email,\n                        gender: employee.gender,\n                        id: employee.id.value\n                    }\n                   \n                })\n\n            })\n}\n};","import React from \"react\";\n\nfunction Wrapper ({children}) {\n    return (\n        <div className = \"wrapper\">\n           {children}\n        </div>\n    );\n    \n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\"\n\n\nfunction HeaderText() {\n    return(\n        <h2 className = \"headerText\">Employee Directory</h2>\n    );\n}\n\n\nexport default HeaderText;","import React from \"react\";\nimport HeaderText from \"../HeaderText\";\nimport \"./style.css\";\n\n\nfunction HeaderBody() {\n    return(\n        <div className = \"headerBody\">\n            <HeaderText />\n        </div>\n    );\n}\n\nexport default HeaderBody","import React from \"react\";\nimport HeaderBody from \"../HeaderBody\";\n\nfunction Header () {\n    return (\n        <div>\n            <HeaderBody />\n        </div>\n\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Search(props) {\n\n    return (\n        <form className=\"search\">\n            <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\">\n                        Search by name\n                </span>\n                </div>\n                <input\n                    value={props.search}\n                    onChange={props.handleSearchChange}\n                    className=\"form-control mr-sm-2\"\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder=\"first name\"\n                    aria-label=\"Search\"\n                />\n                <button\n                    // value={props.handleSearchChange}\n                    name=\"name\"\n                    type=\"button\"\n                    onClick={props.handleClick}\n                >\n                    Search\n                </button>\n            \n\n            </div>\n        </form>\n    );\n}\n\n\nexport default Search","import React from \"react\";\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Table({ employees }) {\n    return (\n            <ReactBootStrap.Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Phone</th>\n                        <th>Email</th>\n                        <th>Gender</th>\n                    </tr>\n                </thead>\n                \n                    {employees}\n            \n              \n            </ReactBootStrap.Table>\n    \n    );\n}\n\nexport default Table;","import React, { useEffect, useState } from \"react\";\nimport Api from \"../utils/Api\";\nimport Wrapper from \"../components/Wrapper\";\nimport Header from \"../components/Header\";\nimport Search from \"../components/Search\";\nimport Table from \"../components/Table\";\n\n\n\nfunction Directory()  {\n    const [employees, setEmployees] = useState([]);\n    const [search, setSearch] = useState();\n    const [filtered, setFiltered] = useState([]);\n \n    useEffect(() => {\n   \n        Api.getEmployees()\n        .then(employees => {\n            console.log(employees);\n            setEmployees(employees);\n            } \n        )\n        .catch(err => console.log(err));\n      }, []);\n\n\n/// Function to handle input change upon entering name search ////////////////////////\n    const handleSearchChange = event => {\n        console.log(\"search initiated\");\n        const newSearch = event.target.value;\n        const lowerCaseSearch = newSearch.toLowerCase();\n        setSearch(lowerCaseSearch);\n        console.log(search);\n        return;\n    };\n\n    const handleClick = event => {\n        console.log(search)\n        filterEmployees(search)\n       \n    }\n\n    /// This function will use the search state to filter through the employee state and rerender the employee list //////\n   function filterEmployees(search) {\n       console.log(search);\n       console.log(employees);\n\n            employees.filter(employees => {\n                if(employees.firstName.toLowerCase() === search || employees.lastName.toLowerCase() === search) {\n                const filteredList = [];\n                filteredList.push(employees)\n                console.log(filteredList)\n                setEmployees(filteredList)\n                \n            }\n       });\n    }\n\n\n\n/// Will render all employees from the current employee state ////////////////////////////\n    function renderEmployee(employee) {\n        return (\n            <tr>\n                <td>{employee.firstName}</td>\n                <td>{employee.lastName}</td>\n                <td>{employee.phone}</td>\n                <td>{employee.email}</td>\n                <td>{employee.gender}</td>\n            </tr>\n        )\n    };\n\n///// Returned JSX for UI ///////////////////////////////////////////////////////    \n    return (\n        <div>\n            <Wrapper>\n                <Header />\n                <Search\n                  handleSearchChange={handleSearchChange}\n                  handleClick={handleClick}\n                />\n                <Table\n                  employees={employees.map(renderEmployee)}\n                />\n            </Wrapper>\n        </div>\n    )\n};\n\nexport default Directory;","import React from 'react';\nimport Directory from \"./pages/Directory\";\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Directory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}